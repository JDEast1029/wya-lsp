<template>
	<block>
		<wxs module="tools">
			var getClass = function getClass(index, currentValue, value, isAll) {
				var className = '';
				var isCheck = currentValue[index] === value || (!currentValue[index] && isAll);
				if (index === 0) {
					className += ' g-c-333'
					if (isCheck) {
						className += ' g-fs-32'
					} else {
						className += ' g-fs-30'
					}
				} else if (index === 1) {
					className += ' g-fs-28'
					if (!isCheck) {
						className += ' g-c-999'
					}
				} else if (index === 2) {
					className += ' g-fs-26 __btn'
					if (isCheck) {
						className += ' __active';
					} else {
						className += '  g-c-666';
					}
				}
				if (isCheck) {
					className += ' __active-color';
				}
				return className;
			};

			module.exports = {
				getClass: getClass
			};
		</wxs>
		<view class="v-common-filter-tabs">
			<view wx:for="{{ rebuildData }}" wx:key="index" class="g-flex {{ index != rebuildData.length - 1 ? 'g-bb' : '' }}">
				<view 
					class="__all is-tag-view"
					data-value="{{ allKey }}"
					data-index="{{ index }}"
					bind:tap="handleTabClick"
				>
					<view class="g-wb-ba {{ tools.getClass(index, currentValue, allKey, true) }}">
						全部
					</view>
					<view class="{{ (allKey == currentValue[index] || !currentValue[index]) && index === 0 ? '__line' : '' }}" />
				</view>
				<scroll-view 
					wx:key="{{index}}"
					class="__scroll g-bg-white g-flex" 
					style="height: {{ index === 0 ? 88 : 80 }}rpx; box-sizing: border-box;" 
					scroll-x 
					enable-flex
					scroll-with-animation
					data-index="{{ index }}"
					scroll-into-view="{{ scrollView[index] }}"
				>
					<view 
						wx:for="{{ rebuildData[index] }}" 
						wx:for-item="item" 
						wx:for-index="rowIndex" 
						wx:key="rowIndex" 
						class="__item is-tag-view"
						data-key="{{ rowIndex }}"
						data-index="{{ index }}"
						data-value="{{ item.value }}"
						id="ele{{index}}{{ rowIndex }}"
						data-row-index="{{ rowIndex }}"
						bind:tap="handleTabClick"
					>
						<view class="g-wb-ba {{ tools.getClass(index, currentValue, item.value, false) }}">
							{{ item.label }}
						</view>
						<view class="{{ item.value == currentValue[index] && index === 0 ? '__line' : '' }}" />
					</view>
				</scroll-view>
			</view>
		</view>              
	</block>
</template>

<script>
import Component from '../../../common/component';
import { initData } from '../../../utils/utils';

Component({
	properties: {
		dataSource: {
			type: Array,
			value: [],
			observer(v) {
				v.length && this.setData({
					formatDataSource: initData(v, this.data.dataSourceKey.value, this.data.dataSourceKey.label, '')
				});
				this.setData({
					rebuildData: this.makeRebuildData(this.data.formatDataSource)
				});
			}
		},
		dataSourceKey: {
			type: Object,
			value: {
				value: 'material_category_id',
				label: 'category_name',
			}
		},
		value: {
			type: Array
		},
	},
	data: {
		currentValue: [],
		formatDataSource: [], // 格式化后的数据
		rebuildData: [],
		allKey: 'is_all',
		scrollView: [],
		scrollLefts: []
	},
	lifetimes: {
		attached() { 
		},
	},
	observers: {
		value(v) {
			this.setData({
				currentValue: v
			});
		}
	},
	methods: {
		// 点击居中处理
		handleTabClick(event) {
			const { value, index, rowIndex } = event.currentTarget.dataset;
			let currentValue = this.data.currentValue;
			let rebuildData = this.data.rebuildData;
			const len = currentValue.slice(index).length; // 需要去掉下级的值

			currentValue.splice(index, len, value);

			let children = currentValue.reduce((pre, cur) => {
				let target = pre.find(i => i.value == cur) || {};
				return target.children ? target.children : undefined;
			}, this.data.formatDataSource);

			if (children) {
				rebuildData.splice(index + 1, len, children);
			}
			if (!children || children.length === 0) {
				rebuildData.splice(index + 1, len);
			}
			let scrollView = [];
			for (let i = 0; i < rebuildData.length; i++) {
				if (i === index) {
					scrollView[i] = `ele${index}${rowIndex}`;
				} else {
					scrollView[i] = this.data.scrollView[i];
				}
			}
			this.setData({
				currentValue,
				rebuildData,
				scrollView
			});
			this.triggerEvent('change', { value: this.getValidValue(currentValue), currentValue, len: rebuildData.length });
		},
		getValidValue(value) { // 获取有效的值，全部是个无效的值，没有id
			const len = value.length;
			let i = len - 1;
			while (i >= 0) {
				if (value[i] !== this.data.allKey) {
					return value[i];
				}
				i--;
			}
			return '';
		},
		makeRebuildData(value) {
			if (!value.length) return [];
			let temp = value;
			let data = this.data.currentValue.slice(0).reduce((pre, cur, index) => {
				pre[index] = temp;
				temp = ((temp && temp.find(i => i.value == cur)) || {}).children;
				return pre; 
			}, []);

			if (temp) {
				data.push(temp);
			}
			return data;
		},
	},
});
</script>

<style lang="scss">
@import '../../../assets/css/theme.scss';
@import '../../../assets/css/global.scss';

.v-common-filter-tabs {
	width: 100vw;
	overflow-x: hidden;
	background: $white;
	.__active-color {
		color: #53D1BF !important;
	}
	.is-tag-view {
		position: relative;
		display: flex;
		align-items: center;
		font-size: 30rpx;
		box-sizing: border-box;
		white-space: nowrap;
	}
	.__all {
		justify-content: center;
		margin-left: 32rpx;
	}
	.__scroll {
		width: calc(100% - 90rpx);
		padding: 0 26rpx;
	}
	.__item:not(:last-child) {
		margin-right: 36rpx;
	}
	.__line {
		position: absolute;
		bottom: 0;
		left: 0;
		z-index: 1;
		width: 100%;
		height: 4rpx;
		border-radius: 6rpx;
		background-color: #53D1BF;
	}
	.__btn {
		width: auto;
		height: 40rpx;
		line-height: 40rpx;
		text-align: center;
		padding: 0 18rpx;
		background: #f4f4f4;
		border-radius: 4rpx;
		font-size: 26rpx;
	}
	.__active {
		color: #fff !important;
		background: #53d1bf;
	}
}
</style>

<config>
{
	"component": true, 
	"usingComponents": {
		"ms-filter": "../popup/filter"
	}
}
</config>
